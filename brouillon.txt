const types: string[] = [
    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',
    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'
];

const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>):void => {
    const fieldName: string = e.target.name;
    const fieldValue: string = e.target.value;
    const pokemonField: Field = { [fieldName]: { value: fieldValue} };
    // pokemon[fieldName] = pokemonField;
    
    console.log(pokemonField);

}

const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    let newPokemon: Pokemon = {
        name: {},
        hp: {},
        cp: {},
        types: {}
    }
}

/*
const validateForm = (): boolean|undefined => {
    
    let newForm: Pokemon = pokemon;
    
    // Validator name
    if(!/^[a-zA-Zàéè ]{3,25}$/.test(pokemon.name.value)) {
      const errorMsg: string = 'Le nom du pokémon est requis (1-25).';
      const newField: Field = { value: pokemon.name.value, error: errorMsg, isValid: false };
      newForm = { ...newForm, ...{ name: newField } };
    } else {
      const newField: Field = { value: pokemon.name.value, error: '', isValid: true };
      newForm = { ...newForm, ...{ name: newField } };
    }

    // Validator hp
    if(!/^[0-9]{1,3}$/.test(pokemon.hp.value)) {
      const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';
      const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};
      newForm = { ...newForm, ...{ hp: newField } };
    } else {
      const newField: Field = { value: form.hp.value, error: '', isValid: true };
      newForm = { ...newForm, ...{ hp: newField } };
    }

    // Validator cp
    if(!/^[0-9]{1,2}$/.test(form.cp.value)) {
      const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';
      const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};
      newForm = { ...newForm, ...{ cp: newField } };
    } else {
      const newField: Field = { value: form.cp.value, error: '', isValid: true };
      newForm = { ...newForm, ...{ cp: newField } };
    }

    setForm(newForm);
    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;
    
}
*/

return (
    <form onSubmit={(e) => handleSubmit(e)}>  
    <div> 
        <div className="row" >
            <div className="col s12 m8 offset-m1">
               <div className="card hoverable">
                    <div className="card-image">
                        <div className="card-content">
                            <div className="form-group">
                                <label htmlFor="name">Nom</label>
                                <input id="name" name="name" type="text" className="form-control" placeholder={'Nom du pokémon'}  onChange={(e) => {handleInputChange(e)}} required></input>
                            </div>
                            <div className="form-group">
                                <label htmlFor="hp">Point de vie</label>
                                <input id="hp" name="hp" type="number" className="form-control" min="0" max="999" onChange={(e) => {handleInputChange(e)}} required/>
                            </div>
                            <div className="form-group">
                                <label htmlFor="cp">Dégâts</label>
                                <input id="cp" name="cp" type="number" className="form-control" min="0" max="999" onChange={(e) => {handleInputChange(e)}} required/>
                            </div>
                            <div className="form-group">
                                <label>Types</label>
                                    {types.map(type => (
                                    <div key={type} style={{marginBottom: '10px'}}>
                                        <label>
                                        <input id={type} type="checkbox" className="filled-in" onChange={(e) => {handleInputChange(e)}} ></input>
                                        <span>
                                            <p className={formatType(type)}>{ type }</p>
                                        </span>
                                        </label>
                                    </div>
                                    ))}
                            </div>
                            <div className="card-action center">
                                {/* Submit button */}
                                <button type="submit" className="btn">Valider</button>
                            </div> 
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </form>);