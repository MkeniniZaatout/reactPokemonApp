{"version":3,"sources":["helpers/format-date.ts","helpers/format-type.ts","components/pokemon-card.tsx","models/mock-pokemon.ts","services/pokemon-service.ts","components/pokemon-search.tsx","pages/pokemon-list.tsx","components/loader.tsx","pages/pokemon-detail.tsx","models/pokemon.ts","components/pokemon-form.tsx","pages/pokemon-ajout.tsx","pages/pokemon-edit.tsx","pages/page-not-found.tsx","services/authentication-service.ts","pages/login.tsx","PrivateRoute.tsx","App.tsx","index.tsx"],"names":["formatDate","date","Date","getDate","getMonth","getFullYear","formatType","type","color","PokemonCard","pokemon","borderColorCardPokemon","useState","setColor","history","useHistory","className","onClick","id","push","onMouseEnter","onMouseLeave","style","borderColor","src","picture","alt","name","created","types","map","key","POKEMONS","hp","cp","PokemonService","this","isDev","fetch","then","response","json","catch","error","handleError","Promise","resolve","pokemons","data","isEmpty","find","method","body","JSON","stringify","headers","index","findIndex","filter","term","includes","Object","keys","length","console","process","PokemonSearch","setTerm","setPokemons","placeholder","value","onChange","e","target","searchPokemon","handleInputChange","to","Pokemonlist","useEffect","Loader","PokemonsDetail","match","setPokemon","params","res","width","margin","Pokemon","PokemonForm","isEditForm","pokemonInfo","isValid","form","setForm","hasType","fieldName","fieldValue","newField","addPokemon","validateForm","newForm","startsWith","endWith","test","isTypeValid","onSubmit","preventDefault","updatePokemon","handleSubmit","window","confirm","deletePokemon","htmlFor","required","min","max","marginBottom","toString","checked","concat","currentTypes","selectType","disabled","PokemonAjout","getTime","undefined","PokemonEdit","log","PageNotfound","Authentication","userName","mdp","isAuthentication","setTimeout","isAuthenticated","Login","username","password","message","setMessage","AuthenticationService","login","PrivateRoute","Component","component","rest","render","props","pathname","App","icon","pokemonIcon","exact","path","PokemonDetail","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0c21b303.chunk.js","sourcesContent":["const formatDate = (date: Date = new Date()): string => {\r\n    return `${date.getDate()}/${date.getMonth()}/${date.getFullYear()}`\r\n  }\r\n\r\nexport default formatDate;","const formatType = (type: string): string => {\r\n    let color: string;\r\n\r\n    switch (type) {\r\n        case 'Feu': \r\n        color = 'red lighten-1'; \r\n        break; \r\n        case 'Eau': \r\n        color = 'blue lighten-1'; \r\n        break; \r\n        case 'Plante': \r\n        color = 'green lighten-1'; \r\n        break; \r\n        case 'Insecte': \r\n        color = 'brown lighten-1'; \r\n        break; \r\n        case 'Normal': \r\n        color = 'grey lighten-3'; \r\n        break; \r\n        case 'Vol': \r\n        color = 'blue lighten-3'; \r\n        break; \r\n        case 'Poison': \r\n        color = 'deep-purple accent-1'; \r\n        break; \r\n        case 'Fée': \r\n        color = 'pink lighten-4'; \r\n        break; \r\n        case 'Psy': \r\n        color = 'deep-purple darken-2'; \r\n        break; \r\n        case 'Electrik': \r\n        color = 'lime accent-1'; \r\n        break; \r\n        case 'Combat': \r\n        color = 'deep-orange'; \r\n        break; \r\n        default: \r\n        color = 'grey'; \r\n        break; \r\n    }\r\n\r\n    return `chip ${color}`;\r\n}\r\n\r\nexport default formatType;","import React, { FunctionComponent, useState } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport './pokemon-card.css';\r\nimport formatDate from '../helpers/format-date';\r\nimport formatType from '../helpers/format-type';\r\nimport { useHistory } from 'react-router-dom';\r\ntype Props = {\r\n  pokemon: Pokemon,\r\n  borderColorCardPokemon? : string\r\n};\r\n  \r\n\r\nconst PokemonCard: FunctionComponent<Props> = ({pokemon, borderColorCardPokemon = '#009688'}) => {\r\n\r\n  const [color, setColor] = useState<string>();\r\n  // On recupere l'historique du navigateur via useHistory\r\n  const history = useHistory();\r\n    \r\n  const showBorder = () => {\r\n      setColor(borderColorCardPokemon);//On ajoute une nouvelle couleur à la bordure pour ajouter un effet navigation\r\n  }\r\n\r\n  const hideColorBorder = () => {\r\n      setColor('#f5f5f5');//On remet la bordure en gris\r\n  }\r\n\r\n  const goToPokemon = (id: number) => {\r\n    history.push(`/pokemons/${id}`);\r\n  }\r\n\r\n  return (\r\n    <div className=\"\"/*\"col s6 m4\"*/ onClick={() => goToPokemon(pokemon.id)} onMouseEnter={showBorder} onMouseLeave={hideColorBorder}>\r\n      <div className=\"card horizontal\" style={{ borderColor: color}}>\r\n        <div className=\"card-image\"> \r\n          <img src={pokemon.picture} alt={pokemon.name}/>\r\n        </div>\r\n        <div className=\"card-stacked\">\r\n          <div className=\"card-content\">\r\n            <p>{pokemon.name}</p>\r\n            <p><small>{formatDate(pokemon.created)}</small></p>\r\n            {pokemon.types.map(type => (<span className={formatType(type)} key={type}>{type} </span>))}\r\n          </div>\r\n        </div>\r\n      </div> \r\n    </div>\r\n  );\r\n}\r\nexport default PokemonCard;","import Pokemon from './pokemon';\r\n   \r\nexport const POKEMONS: Pokemon[] = [\r\n {\r\n  id: 1,\r\n  name: \"Bulbizarre\",\r\n  hp: 25,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\r\n  types: [\"Plante\", \"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 2,\r\n  name: \"Salamèche\",\r\n  hp: 28,\r\n  cp: 6,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",\r\n  types: [\"Feu\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 3,\r\n  name: \"Carapuce\",\r\n  hp: 21,\r\n  cp: 4,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",\r\n  types: [\"Eau\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 4,\r\n  name: \"Aspicot\",\r\n  hp: 16,\r\n  cp: 2,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png\",\r\n  types: [\"Insecte\", \"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 5,\r\n  name: \"Roucool\",\r\n  hp: 30,\r\n  cp: 7,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/016.png\",\r\n  types: [\"Normal\", \"Vol\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 6,\r\n  name: \"Rattata\",\r\n  hp: 18,\r\n  cp: 6,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/019.png\",\r\n  types: [\"Normal\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 7,\r\n  name: \"Piafabec\",\r\n  hp: 14,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/021.png\",\r\n  types: [\"Normal\", \"Vol\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 8,\r\n  name: \"Abo\",\r\n  hp: 16,\r\n  cp: 4,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png\",\r\n  types: [\"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 9,\r\n  name: \"Pikachu\",\r\n  hp: 21,\r\n  cp: 7,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/025.png\",\r\n  types: [\"Electrik\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 10,\r\n  name: \"Sabelette\",\r\n  hp: 19,\r\n  cp: 3,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/027.png\",\r\n  types: [\"Normal\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 11,\r\n  name: \"Mélofée\",\r\n  hp: 25,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/035.png\",\r\n  types: [\"Fée\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 12,\r\n  name: \"Groupix\",\r\n  hp: 17,\r\n  cp: 8,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png\",\r\n  types: [\"Feu\"],\r\n  created: new Date()\r\n }\r\n];\r\n  \r\nexport default POKEMONS;","\r\n/*\r\nimport { isThisTypeNode } from 'typescript';\r\nimport Pokemon from '../models/pokemon';\r\n\r\nexport default class PokemonService {\r\n    \r\n    static addPokemons(pokemon: Pokemon): Promise<Pokemon|null> {\r\n        // Date de creation ajouté automatiquement.\r\n        delete pokemon.created;\r\n        \r\n        return fetch(`http://localhost:3001/pokemons`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(pokemon),\r\n        }).then(res=> res.json()).catch(error => this.handleError(error));\r\n    }\r\n\r\n    static getPokemons(): Promise<Pokemon[]> {\r\n        return fetch('http://localhost:3001/pokemons')\r\n        .then(response => response.json());\r\n    }\r\n\r\n    static getPokemon(id: number): Promise<Pokemon|null> {\r\n        return fetch(`http://localhost:3001/pokemons/${id}`)\r\n            .then(res => res.json())\r\n            .then(data => this.isEmpty(data) ? null : data)\r\n            .catch(error => this.handleError(error));\r\n    }\r\n\r\n    static updatePokemon(pokemon: Pokemon): Promise<Pokemon|null> {\r\n        return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(pokemon),\r\n            headers: { 'Content-Type': 'application/json' }\r\n        }).then(res=> res.json()).catch(error => this.handleError(error));\r\n    }\r\n\r\n    static deletePokemon(pokemonId: Number) {\r\n        return fetch(`http://localhost:3001/pokemons/${pokemonId}`, {\r\n            method: 'DELETE',\r\n            headers: {'Content-Type': 'application/json' }\r\n        })\r\n        .then(res => res.json()).catch(err => this.handleError(err));\r\n    }\r\n\r\n    static handleError(error: Error): void {\r\n        console.error(error);\r\n        console.log(error.toString());\r\n        throw new Error(error.toString());\r\n    }\r\n\r\n    static isEmpty(data: Object): boolean {\r\n        return Object.keys(data).length === 0;\r\n    }\r\n\r\n    static searchPokemon(term: string): Promise<Pokemon[]> {\r\n        return fetch(`http://localhost:3001/pokemons?q=${term}`)\r\n        .then(res => res.json())\r\n        .catch(error => this.handleError(error));\r\n    }\r\n\r\n}\r\n*/\r\n\r\nimport Pokemon from \"../models/pokemon\";\r\nimport POKEMONS from \"../models/mock-pokemon\";\r\n  \r\nexport default class PokemonService {\r\n  \r\n  static pokemons:Pokemon[] = POKEMONS;\r\n  \r\n  static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development');\r\n  \r\n  static getPokemons(): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch('http://localhost:3001/pokemons')\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {\r\n      resolve(this.pokemons);\r\n    });\r\n  }\r\n  \r\n  static getPokemon(id: number): Promise<Pokemon|null> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${id}`)\r\n      .then(response => response.json())\r\n      .then(data => this.isEmpty(data) ? null : data)\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      resolve(this.pokemons.find(pokemon => id === pokemon.id));\r\n    }); \r\n  }\r\n  \r\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {\r\n      const { id } = pokemon;\r\n      const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\r\n      this.pokemons[index] = pokemon;\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n  \r\n  static deletePokemon(pokemon: Pokemon): Promise<{}> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const { id } = pokemon;\r\n      this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\r\n      resolve({});\r\n    }); \r\n  }\r\n  \r\n  static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    pokemon.created = new Date(pokemon.created);\r\n  \r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      this.pokemons.push(pokemon);\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n  \r\n  static searchPokemon(term: string): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons?q=${term}`)\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\r\n      resolve(results);\r\n    });\r\n  \r\n  }\r\n  \r\n  static isEmpty(data: Object): boolean {\r\n    return Object.keys(data).length === 0;\r\n  }\r\n  \r\n  static handleError(error: Error): void {\r\n    console.error(error);\r\n  }\r\n}","import React, { FunctionComponent, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonService from '../services/pokemon-service'\r\n\r\nconst PokemonSearch: FunctionComponent = () => {\r\n  \r\n    const [term, setTerm] = useState<string>('');\r\n    const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n   \r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n      const term = e.target.value;\r\n      setTerm(term);\r\n   \r\n      if(term.length <= 1) {\r\n        setPokemons([]);\r\n        return;\r\n      }\r\n   \r\n      PokemonService.searchPokemon(term).then(pokemons => setPokemons(pokemons));\r\n    }\r\n    \r\n    return (\r\n      <div className=\"row\"> \r\n      <div className=\"col s12 m6\"> \r\n        <div className=\"card\"> \r\n        <div className=\"card-content\"> \r\n          <div className=\"input-field\"> \r\n          <input type=\"text\" placeholder=\"Rechercher un pokémon\" value={term} onChange={e => handleInputChange(e)} /> \r\n          </div> \r\n          <div className='collection'>\r\n          {pokemons.map((pokemon) => (\r\n            <Link key={pokemon.id} to={`/pokemons/${pokemon.id}`} className=\"collection-item\">\r\n              {pokemon.name}\r\n            </Link>\r\n          ))}\r\n          </div> \r\n        </div> \r\n        </div> \r\n      </div> \r\n      </div>\r\n    );\r\n  }\r\n    \r\n  export default PokemonSearch;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport PokemonCard from '../components/pokemon-card';\r\nimport Pokemon from '../models/pokemon';\r\nimport POKEMONS from '../models/mock-pokemon';\r\nimport { useHistory } from 'react-router-dom';\r\nimport PokemonSearch from '../components/pokemon-search';\r\n\r\nconst Pokemonlist: FunctionComponent = () => {\r\n\r\n    const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        fetch('http://localhost:3001/pokemons')\r\n        .then(response => response.json())\r\n        .then((pokemons) => {\r\n            setPokemons(pokemons)\r\n        });\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <h1 className=\"center\">Pokédex</h1>\r\n            <div className=\"container\">\r\n                <div className=\"center\">\r\n                    <button onClick={() => {history.push(`/add`);}}>Ajouter un pokemon</button>\r\n                </div>\r\n                <PokemonSearch/>\r\n                <div className=\"row\">                \r\n                {pokemons.map(pokemon => (\r\n                    <PokemonCard key={pokemon.id} pokemon={pokemon} /*{borderColorCardPokemon='red'}*/ />\r\n                ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pokemonlist;","import React, { FunctionComponent } from 'react';\r\n\r\nconst Loader: FunctionComponent = () => {\r\n\r\n    return (\r\n        <div className=\"preloader-wrapper big active\"> \r\n        <div className=\"spinner-layer spinner-blue\"> \r\n          <div className=\"circle-clipper left\"> \r\n            <div className=\"circle\"></div> \r\n          </div>\r\n          <div className=\"gap-patch\"> \r\n            <div className=\"circle\"></div> \r\n          </div><div className=\"circle-clipper right\"> \r\n            <div className=\"circle\"></div> \r\n          </div>\r\n        </div> \r\n     </div>   \r\n    )\r\n}\r\n\r\nexport default Loader;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps, Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport POKEMONS from '../models/mock-pokemon';\r\nimport formatDate from '../helpers/format-date';\r\nimport formatType from '../helpers/format-type';\r\nimport Loader from '../components/loader';\r\n\r\nimport '../components/pokemon-detail.css';\r\n\r\n\r\ntype Params = { id: string };\r\n  \r\nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n    \r\n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\r\n  \r\n  useEffect(() => {\r\n    fetch(`http://localhost:3001/pokemons/${match.params.id}`)\r\n    .then(res => res.json())\r\n    .then(pokemon => {\r\n      if(pokemon.id) {\r\n        setPokemon(pokemon);\r\n      }\r\n    })\r\n  }, [match.params.id]);\r\n    \r\n  return (\r\n    <div>\r\n      { pokemon ? (\r\n        <div className=\"row\" >\r\n          <div className=\"col s12 m8 offset-m2\"> \r\n            <h2 className=\"header center\">{ pokemon.name }</h2>\r\n            <div className=\"card hoverable\"> \r\n              <div className=\"card-image\">\r\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n                <Link to={`edit/${pokemon.id}`} className='btn btn-floating halfway-fab waves-effect waves-light'>\r\n                    <i className=\"material-icons\">edit</i>\r\n                </Link>\r\n              </div>\r\n              <div className=\"card-stacked\">\r\n                <div className=\"card-content\">\r\n                  <table className=\"bordered striped\">\r\n                    <tbody>\r\n                      <tr> \r\n                        <td>Nom</td> \r\n                        <td><strong>{ pokemon.name }</strong></td> \r\n                      </tr>\r\n                      <tr> \r\n                        <td>Points de vie</td> \r\n                        <td><strong>{ pokemon.hp }</strong></td> \r\n                      </tr> \r\n                      <tr> \r\n                        <td>Dégâts</td> \r\n                        <td><strong>{ pokemon.cp }</strong></td> \r\n                      </tr> \r\n                      <tr> \r\n                        <td>Types</td> \r\n                        <td>\r\n                          {pokemon.types.map(type => (\r\n                           <span key={type} className={formatType(type)}>{type}</span>\r\n                          ))}</td> \r\n                      </tr> \r\n                      <tr> \r\n                        <td>Date de création</td> \r\n                        <td>{formatDate(pokemon.created)}</td> \r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n                <div className=\"card-action\">\r\n                  <Link to=\"/\">Retour</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n    <div className=\"center\">\r\n        <h4 className='card-action'> <Loader></Loader> </h4>\r\n    </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonsDetail;","export default class Pokemon {\r\n    // 1. Typage des propiétés d'un pokémon.\r\n    public id: number;\r\n    public hp: number;\r\n    public cp: number;\r\n    public name: string;\r\n    public picture: string;\r\n    public types: Array<string>;\r\n    public created: Date;\r\n\r\n    // 2. Définition des valeurs par défaut des propriétés d'un pokémon.\r\n    constructor(\r\n        id: number,\r\n        hp: number = 100,\r\n        cp: number = 10,\r\n        name: string = '...',\r\n        picture: string = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/XXX.png',\r\n        types: Array<string> = ['Normal'],\r\n        created: Date = new Date()\r\n    ){\r\n        // 3. Initialisation des propiétés d'un pokémons.\r\n        this.id = id;\r\n        this.hp = hp;\r\n        this.cp = cp;\r\n        this.name = name;\r\n        this.picture = picture;\r\n        this.types = types;\r\n        this.created = created;\r\n    }\r\n\r\n\r\n}","import React, { FunctionComponent, useState } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatType from '../helpers/format-type';\r\nimport { useHistory } from 'react-router-dom';\r\nimport PokemonService from '../services/pokemon-service';\r\n\r\ntype Props = {\r\n  pokemon: Pokemon,\r\n  isEditForm: boolean\r\n};\r\n\r\ntype Field = {\r\n    value?:any,\r\n    error?: string,\r\n    isValid?:boolean\r\n};\r\n  \r\ntype Form = {\r\n    name: Field,\r\n    hp: Field,\r\n    cp: Field,\r\n    types: Field,\r\n    picture: Field\r\n}\r\n\r\n// ToDo : comprendre comment l'objet pokemon est récupéré entierement ? -> recuperer dans pokemon-edit avec useState\r\nconst PokemonForm: FunctionComponent<Props> = ({pokemon, isEditForm}) => {\r\n    const history:any = useHistory();\r\n\r\n    let pokemonInfo = {\r\n        name: { value: pokemon.name, isValid: true},\r\n        hp: { value: pokemon.hp, isValid: true},\r\n        cp: { value: pokemon.cp, isValid: true},\r\n        types: { value: pokemon.types, isValid: true},\r\n        picture: { value: pokemon.picture, isValid: true}\r\n    };\r\n    // get pokemonInfo with useState type form FROM pokemon-detail \r\n    const [form, setForm] = useState<Form>(pokemonInfo);\r\n\r\n    const types: string[] = [\r\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\r\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\r\n    ];\r\n\r\n    const hasType = (type: string): boolean => {\r\n        return form.types.value.includes(type);\r\n    };\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>):void => {\r\n        const fieldName: string = e.target.name;\r\n        const fieldValue: string = e.target.value;\r\n        const newField: Field = { [fieldName]: { value: fieldValue} };\r\n    \r\n        setForm({...form, ...newField});\r\n    }\r\n\r\n    const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\r\n\r\n        const checked:boolean = e.target.checked;\r\n        let newField: Field;\r\n        let newTypes: string[] = [];\r\n        if(checked) {\r\n            // Si l'utilisateur coche un nouveau type, on l'ajoute à la liste des types du pokemon \r\n            newTypes = form.types.value.concat([type]);\r\n        } else {\r\n            // Si l'utilisateur decoche un type, on le retire decla liste des types du pokemon. \r\n            newTypes = form.types.value.filter((currentTypes: string) => currentTypes !== type);\r\n        }\r\n        newField = {value: newTypes };\r\n        // Comprendre\r\n        setForm({...form,...{types: newField} });\r\n    }\r\n    \r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        const formIsValid: boolean|undefined = validateForm();\r\n        \r\n        if(formIsValid) {\r\n            pokemon.picture = form.picture.value;\r\n            pokemon.name = form.name.value;\r\n            pokemon.cp = form.cp.value;\r\n            pokemon.hp = form.hp.value;\r\n            pokemon.types = form.types.value;\r\n            \r\n            isEditForm? PokemonService.updatePokemon(pokemon).then(()=> { history.push(`/pokemons/${pokemon.id}`) }) : addPokemon();\r\n            // history.push(`/pokemons/${pokemon.id}`);\r\n        }\r\n    }\r\n\r\n    const addPokemon = () => {\r\n        PokemonService.addPokemon(pokemon).then( () => { history.push('/pokemons') })\r\n    }\r\n\r\n    const isAddForm = () => {\r\n        return !isEditForm;\r\n    }\r\n\r\n    const validateForm = (): boolean|undefined => {\r\n        let newForm: Form = form;\r\n        \r\n        // Validator url to check if is Add Or Edit for pokemon Picture in page\r\n        if(isAddForm()) {\r\n            const start = \"https://assets.pokemon.com/assets/css2/img/pokedex/detail\";\r\n            const end = \".png\";\r\n            let newField: Field = {};\r\n            if(!form.picture.value.startsWith(start) || !form.picture.value.endWith(end) ) {\r\n                const errorMsg = \"\";\r\n                newField = { value: form.picture.value, error: errorMsg, isValid: false };\r\n            } else {\r\n                newField = { value: form.picture.value, error: '', isValid: true };\r\n            }\r\n            newForm = { ...form, ...{picture: newField}};\r\n        }\r\n\r\n        // Validator name\r\n        if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\r\n          const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\r\n          const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\r\n          newForm = { ...newForm, ...{ name: newField } };\r\n        } else {\r\n          const newField: Field = { value: form.name.value, error: '', isValid: true };\r\n          newForm = { ...newForm, ...{ name: newField } };\r\n        }\r\n    \r\n        // Validator hp\r\n        if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\r\n          const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\r\n          const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\r\n          newForm = { ...newForm, ...{ hp: newField } };\r\n        } else {\r\n          const newField: Field = { value: form.hp.value, error: '', isValid: true };\r\n          newForm = { ...newForm, ...{ hp: newField } };\r\n        }\r\n    \r\n        // Validator cp\r\n        if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\r\n          const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\r\n          const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\r\n          newForm = { ...newForm, ...{ cp: newField } };\r\n        } else {\r\n          const newField: Field = { value: form.cp.value, error: '', isValid: true };\r\n          newForm = { ...newForm, ...{ cp: newField } };\r\n        }\r\n    \r\n        setForm(newForm);\r\n        return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\r\n      }\r\n\r\n    const isTypeValid = (type: string):boolean => {\r\n\r\n        if(form.types.value.length === 1 && hasType(type)) {\r\n            return false;\r\n        } else if(form.types.value.length >= 3 && !hasType(type)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    const deletePokemon = () => {\r\n        if (window.confirm(\"Voulez-vous vraiment supprimer le pokemon ?\")) { \r\n            PokemonService.deletePokemon(pokemon).then(() => history.push(`/pokemons`) );\r\n        }\r\n    }\r\n\r\n    return (\r\n    <form onSubmit={(e) => handleSubmit(e)}>\r\n        <div className=\"row\">\r\n        <div className=\"col s12 m8 offset-m2\">\r\n            <div className=\"card hoverable\"> \r\n            {isEditForm && (\r\n            <div className=\"card-image\">\r\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n                <span className='btn-floating halfway-fab waves-effect waves-light'>\r\n                    <i onClick={deletePokemon} className='material-icons'>delete</i>\r\n                </span>\r\n            </div>\r\n            )}\r\n            {/* Pokemon Image */}\r\n            <div className=\"card-stacked\">\r\n                <div className=\"card-content\">\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"picture\">Image</label>\r\n                        <input id=\"picture\" name=\"picture\" type=\"text\" className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)} required></input>\r\n                        {/* error */}\r\n                        {form.picture.error && \r\n                        <div className=\"card-panel red accent-1\">\r\n                            {form.picture.error}\r\n                        </div>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"card-stacked\">\r\n                <div className=\"card-content\">\r\n                {/* Pokemon name */}\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Nom</label>\r\n                    <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" placeholder={'Nom du pokémon'} value={form.name.value} onChange={e => handleInputChange(e)} required></input>\r\n                {form.name.error && \r\n                <div className=\"card-panel red accent-1\">\r\n                    {form.name.error}\r\n                </div>\r\n                }\r\n                </div>\r\n                {/* Pokemon hp */}\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"hp\">Point de vie</label>\r\n                    <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" min=\"0\" max=\"999\" value={form.hp.value} onChange={e => handleInputChange(e) } required/>\r\n                </div>\r\n                {/* Pokemon cp */}\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"cp\">Dégâts</label>\r\n                    <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" min=\"0\" max=\"999\" value={form.cp.value} onChange={e => handleInputChange(e)} required/>\r\n                </div>\r\n                {/* Pokemon types */}\r\n                <div className=\"form-group\">\r\n                    <label>Types</label>\r\n                    {types.map(type => (\r\n                    <div key={type} style={{marginBottom: '10px'}}>\r\n                        <label>\r\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value={form.types.value.toString()} checked={hasType(type)} onChange={e => selectType(type, e)} disabled={!isTypeValid(type)} ></input>\r\n                        <span>\r\n                            <p className={formatType(type)}>{ type }</p>\r\n                        </span>\r\n                        </label>\r\n                    </div>\r\n                    ))}\r\n                </div>\r\n                </div>\r\n                <div className=\"card-action center\">\r\n                {/* Submit button */}\r\n                <button type=\"submit\" className=\"btn\">Valider</button>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    </form>\r\n  );\r\n};\r\n   \r\nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps, Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatType from '../helpers/format-type';\r\nimport PokemonForm from '../components/pokemon-form';\r\n\r\nconst PokemonAjout: FunctionComponent = () => {\r\n\r\n    // Generer l'id pour le pokemon\r\n    const [id] = useState<number>(new Date().getTime());\r\n    const [pokemon] = useState<Pokemon|any>(new Pokemon(id, undefined, undefined, undefined, undefined, undefined, new Date()));\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"header center\">Ajouter un pokemon</h1>\r\n                <PokemonForm pokemon={pokemon} isEditForm={false}></PokemonForm>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default PokemonAjout;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport PokemonForm from '../components/pokemon-form';\r\nimport Pokemon from '../models/pokemon';\r\nimport POKEMONS from '../models/mock-pokemon';\r\n \r\ntype Params = { id: string };\r\n  \r\nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match}) => {\r\n  console.log(\"match :\",match)\r\n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\r\n  \r\n  useEffect(() => {\r\n    fetch(`http://localhost:3001/pokemons/${match.params.id}`)\r\n    .then(res => res.json())\r\n    .then(pokemon => {\r\n      if(pokemon.id) {\r\n        setPokemon(pokemon);\r\n      }\r\n    });\r\n  }, [match.params.id]);\r\n    \r\n  return (\r\n    <div>\r\n      { pokemon ? (\r\n        <div>\r\n            <h2 className=\"header center\">Éditer { pokemon.name }</h2>\r\n            <PokemonForm pokemon={pokemon} isEditForm={true}></PokemonForm>\r\n        </div>\r\n      ) : (\r\n        <h4 className=\"center\">Aucun pokémon à afficher !</h4>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonEdit;","import React, { FunctionComponent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PageNotfound: FunctionComponent = () => {\r\n\r\n    return (\r\n    <div className=\"center\">\r\n      <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\r\n      <h1>404 NOT FOUND</h1>\r\n      <h2>Hey, cette page n'existe pas !</h2>\r\n      <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\r\n        Retourner à l'accueil\r\n      </Link>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default PageNotfound;","export default class Authentication {\r\n\r\n    static isAuthenticated: boolean = false;\r\n\r\n    static login(userName:string, mdp: string) : Promise<boolean> {\r\n\r\n        const isAuthentication = (userName === \"pikachu\" && mdp === \"pikachu\");\r\n\r\n        return new Promise(resolve => {\r\n            setTimeout(() => {\r\n                this.isAuthenticated = isAuthentication;\r\n                resolve(isAuthentication);\r\n            }, 1000);\r\n        })\r\n    }\r\n\r\n}","import React, { FunctionComponent, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport AuthenticationService from '../services/authentication-service';\r\n// L 1 à 23 mettre en place l'etat du formulaire comme sur pokemon-form\r\n\r\n\r\n\r\ntype Field = {\r\n  value?: any,\r\n  error?: string,\r\n  isValid?: boolean\r\n};\r\n\r\ntype Form = {\r\n  username: Field,\r\n  password: Field\r\n}\r\n\r\nconst Login: FunctionComponent = () => {\r\n\r\n  const history = useHistory();\r\n\r\n  const [form, setForm] = useState<Form>({\r\n    username: { value: '' },\r\n    password: { value: '' },\r\n  });\r\n\r\n  const [message, setMessage] = useState<string>('Vous êtes déconnecté. (pikachu / pikachu)');\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const fieldName: string = e.target.name;\r\n    const fieldValue: string = e.target.value;\r\n    const newField: Field = { [fieldName]: { value: fieldValue } };\r\n\r\n    setForm({ ...form, ...newField});\r\n  }\r\n\r\n  const validateForm = () => {\r\n    let newForm: Form = form;\r\n\r\n    // Validator username\r\n    if(form.username.value.length < 3) {\r\n      const errorMsg: string = 'Votre prénom doit faire au moins 3 caractères de long.';\r\n      const newField: Field = { value: form.username.value, error: errorMsg, isValid: false };\r\n      newForm = { ...newForm, ...{ username: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.username.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ username: newField } };\r\n    }\r\n\r\n    // Validator password\r\n    if(form.password.value.length < 6) {\r\n      const errorMsg: string = 'Votre mot de passe doit faire au moins 6 caractères de long.';\r\n      const newField: Field = {value: form.password.value, error: errorMsg, isValid: false};\r\n      newForm = { ...newForm, ...{ password: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.password.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ password: newField } };\r\n    }\r\n\r\n    setForm(newForm);\r\n\r\n    return newForm.username.isValid && newForm.password.isValid;\r\n  }\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const isFormValid = validateForm();\r\n    if(isFormValid) {\r\n      setMessage('👉 Tentative de connexion en cours ...');\r\n      AuthenticationService.login(form.username.value, form.password.value).then(isAuthenticated => {\r\n        if(!isAuthenticated) {\r\n          setMessage('🔐 Identifiant ou mot de passe incorrect.');\r\n          return;\r\n        }\r\n        \r\n        history.push('/pokemons');\r\n        \r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={(e) => handleSubmit(e)}>\r\n      <div className=\"row\">\r\n        <div className=\"col s12 m8 offset-m2\">\r\n          <div className=\"card hoverable\">\r\n            <div className=\"card-stacked\">\r\n              <div className=\"card-content\">\r\n                {/* Form message */}\r\n                {message && <div className=\"form-group\">\r\n                  <div className=\"card-panel grey lighten-5\">\r\n                    {message}\r\n                  </div>\r\n                </div>}\r\n                {/* Field username */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"username\">Identifiant</label>\r\n                  <input id=\"username\" type=\"text\" name=\"username\" className=\"form-control\" value={form.username.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* error */}\r\n                  {form.username.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.username.error} \r\n                  </div>} \r\n                </div>\r\n                {/* Field password */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"password\">Mot de passe</label>\r\n                  <input id=\"password\" type=\"password\" name=\"password\" className=\"form-control\" value={form.password.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* error */}\r\n                  {form.password.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.password.error} \r\n                  </div>} \r\n                </div>\r\n              </div>\r\n              <div className=\"card-action center\">\r\n                {/* Submit button */}\r\n                <button type=\"submit\" className=\"btn\">Valider</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n \r\nexport default Login;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport AuthenticationService from './services/authentication-service';\r\n  \r\nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\r\n  <Route {...rest} render={(props) => {\r\n    const isAuthenticated = AuthenticationService.isAuthenticated;\r\n    if (!isAuthenticated) {    \r\n      return <Redirect to={{ pathname: '/login' }} />\r\n    }\r\n  \r\n    return <Component {...props} />\r\n  }} />\r\n);\r\n  \r\nexport default PrivateRoute;","import React, { FunctionComponent } from 'react';\r\nimport Pokemonlist from './pages/pokemon-list';\r\nimport PokemonDetail from './pages/pokemon-detail';\r\nimport PokemonAjout from './pages/pokemon-ajout';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\n// import { FruitsAPI, Fruit, currentUserd} from './quelque-part'\r\n// J'ajoute ça peut être -> import POKEMONS from './models/mock-pokemons';\r\nimport PokemonEdit from './pages/pokemon-edit'\r\nimport PageNotfound from './pages/page-not-found';\r\nimport Login from './pages/login';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nimport { Icon, InlineIcon } from '@iconify/react';\r\nimport pokemonIcon from '@iconify/icons-simple-icons/pokemon';\r\n\r\n\r\nconst App: FunctionComponent = () => {\r\n    return (\r\n    <Router>\r\n        <div>\r\n        {/* La barre de navigation commun à toutes les pages */}\r\n            <nav>\r\n                <div className='nav-wrapper teal'>\r\n                    <Link to=\"/\" className=\"brand-logo center\">Pokédex</Link>\r\n                    <Icon icon={pokemonIcon} />\r\n                </div>\r\n            </nav>\r\n            {/* Le systeme de gestion des routes de notre application */}\r\n            <Switch>\r\n                <PrivateRoute exact path=\"/\" component={Pokemonlist} />\r\n                <Route exact path=\"/login\" component={Login} />\r\n                <PrivateRoute exact path=\"/pokemons\" component={Pokemonlist} />\r\n                <PrivateRoute exact path=\"/pokemons/:id\" component={PokemonDetail} />\r\n                <PrivateRoute exact path=\"/add\" component={PokemonAjout} />\r\n                {/** 404 Page not found : Toujours à mettre à la fin des route \r\n                 * sinon toute les routes seront intercepter par la route PageNotfound */}\r\n                <PrivateRoute path=\"/pokemons/edit/:id\" component={PokemonEdit} />\r\n                <Route component={PageNotfound} />\r\n            </Switch>\r\n        </div>\r\n    </Router>\r\n        // <h1>Bonjour, {pokemons[0].name}</h1>\r\n    )\r\n}\r\n\r\nexport default App;\r\n\r\n/*\r\nexport const App: React.FC = () => {\r\n const name: String = 'React';\r\n    \r\n return (\r\n  <h1>Bonjour, {name} !</h1>\r\n )\r\n}*/\r\n\r\n/*  \r\nimport React from 'react';\r\n\r\nexport default class App extends React.Component {\r\n    const name: string = \"React\";\r\n\r\n    render(){\r\n        <h1>Bonjour, {name} !</h1>;\r\n    }\r\n} \r\n*/","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}